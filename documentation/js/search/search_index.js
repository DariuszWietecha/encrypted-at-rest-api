var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.723,1,1.502]],["body/modules/AppModule.html",[0,0.944,1,2.746,2,0.621,3,0.718,4,1.113,5,1.113,6,0.829,7,1.961,8,1.113,9,1.567,10,1.567,11,1.567,12,2.085,13,0.056,14,2.085,15,2.085,16,1.563,17,1.647,18,1.113,19,1.113,20,0.323,21,0.388,22,0.323,23,1.961,24,2.303,25,0.916,26,0.535,27,2.903,28,3.821,29,1.567,30,1.961,31,1.567,32,1.567,33,1.307,34,0.829,35,1.961,36,1.961,37,1.307,38,1.961,39,1.961,40,1.961,41,1.961,42,1.961,43,1.961,44,1.961,45,1.961,46,1.961,47,1.961,48,1.567,49,0.958,50,2.903,51,2.903,52,1.961,53,0.958,54,0.535,55,1.961,56,1.961,57,1.961,58,1.567,59,1.961,60,1.961,61,1.961,62,1.961,63,1.961,64,1.961,65,2.319,66,1.961,67,1.961,68,1.961,69,1.961,70,1.961,71,1.961,72,1.961,73,1.961,74,1.307,75,0.388,76,0.157,77,0.021,78,0.03,79,0.021]],["title/modules/CryptoModule.html",[0,0.723,12,1.293]],["body/modules/CryptoModule.html",[0,1.226,2,1.189,12,2.192,13,0.053,20,0.619,21,0.742,22,0.619,25,0.742,26,1.025,75,0.742,76,0.301,77,0.039,78,0.047,79,0.039,80,3.753]],["title/injectables/CryptoService.html",[16,0.969,81,0.969]],["body/injectables/CryptoService.html",[13,0.055,16,1.205,20,0.385,21,0.461,22,0.385,25,0.651,26,0.637,49,1.607,53,1.607,54,1.041,75,0.461,76,0.187,77,0.024,78,0.035,79,0.024,81,1.205,82,1.323,83,1.554,84,0.545,85,1.867,86,3.291,87,3.291,88,3.291,89,2.094,90,3.308,91,1.205,92,2.332,93,1.39,94,1.39,95,1.39,96,1.75,97,1.867,98,3.62,99,3.291,100,2.332,101,1.863,102,1.139,103,2.332,104,2.332,105,2.332,106,2.332,107,2.332,108,2.332,109,1.554,110,1.863,111,1.554,112,1.863,113,2.332,114,2.629,115,2.332,116,2.332,117,2.332,118,2.332,119,2.332,120,2.332,121,2.332,122,2.332,123,2.332,124,2.332,125,2.332,126,2.332,127,2.332,128,2.332,129,2.332,130,2.332,131,2.332,132,2.332]],["title/classes/Data.html",[76,0.212,133,0.969]],["body/classes/Data.html",[13,0.055,20,0.46,21,0.552,22,0.46,25,0.552,54,1.143,75,0.552,76,0.224,77,0.029,78,0.039,79,0.029,84,0.652,89,2.145,91,1.533,93,1.179,94,1.179,95,1.179,96,2.064,133,1.363,134,1.583,135,2.229,136,2.48,137,2.272,138,1.363,139,3.722,140,2.791,141,2.112,142,4.188,143,2.791,144,2.973,145,2.791,146,2.229,147,2.973,148,1.363,149,2.791,150,2.791]],["title/controllers/DataController.html",[151,1.502,152,1.502]],["body/controllers/DataController.html",[13,0.056,16,0.938,20,0.203,21,0.243,22,0.203,25,0.766,26,0.336,37,0.819,48,2.046,49,0.984,53,1.447,54,0.55,75,0.243,76,0.099,77,0.013,78,0.021,79,0.013,84,0.287,85,1.144,89,1.822,90,2.806,91,0.738,93,0.852,94,1.252,95,0.852,96,1.082,97,1.144,101,2.963,102,1.811,112,1.61,114,1.61,133,1.085,137,2.299,138,0.601,141,1.144,151,0.698,152,1.144,153,0.982,154,0.982,155,1.23,156,2.046,157,1.707,158,1.23,159,2.806,160,1.23,161,1.23,162,2.612,163,2.016,164,3.512,165,2.016,166,2.016,167,3.512,168,1.61,169,2.016,170,2.963,171,2.016,172,3.512,173,2.016,174,2.016,175,3.295,176,2.016,177,2.016,178,2.016,179,2.016,180,2.016,181,1.144,182,1.61,183,2.016,184,2.016,185,1.23,186,1.343,187,0.982,188,1.23,189,2.016,190,2.016,191,2.016,192,2.016,193,2.016,194,2.562,195,2.016,196,2.963,197,2.016,198,1.61,199,2.016,200,2.016,201,1.61,202,2.016,203,2.016,204,1.23,205,1.23,206,1.23,207,0.819,208,1.082,209,0.982,210,0.819,211,2.016,212,1.23,213,1.23,214,2.016,215,1.23,216,2.016,217,2.562,218,0.819,219,0.938,220,0.982,221,1.23,222,1.23,223,1.707,224,2.562,225,2.016,226,1.23,227,2.562,228,1.23,229,1.23,230,1.23,231,1.23,232,1.23,233,1.23,234,1.23,235,1.23,236,1.23,237,1.23,238,1.23,239,1.343,240,0.982,241,1.23,242,1.23,243,1.23,244,1.23,245,1.23,246,1.23,247,1.23,248,1.23,249,1.23,250,1.23,251,1.23,252,1.23,253,1.23,254,1.23,255,1.23,256,1.23,257,1.23]],["title/classes/DataDto.html",[76,0.212,102,1.293]],["body/classes/DataDto.html",[13,0.054,20,0.567,21,0.68,22,0.567,25,0.68,54,0.938,75,0.68,76,0.276,77,0.036,78,0.045,79,0.036,84,0.803,91,1.258,96,1.953,98,3.4,102,2.078,134,1.95,136,2.836,141,1.95,218,2.29,258,2.746,259,4.623,260,3.437]],["title/modules/DataModule.html",[0,0.723,14,1.293]],["body/modules/DataModule.html",[0,1.079,2,0.79,3,0.913,4,1.414,5,1.414,6,1.053,7,2.242,8,1.414,13,0.056,14,2.426,16,1.695,17,1.956,18,1.414,19,1.414,20,0.411,21,0.493,22,0.411,24,1.661,25,0.956,26,0.681,33,1.661,34,1.053,37,1.661,75,0.493,76,0.2,77,0.026,78,0.036,79,0.026,133,0.913,152,2.242,153,2.754,207,1.661,208,1.955,209,1.991,219,1.695,220,1.991,261,1.991,262,1.991,263,2.493,264,2.493,265,1.053,266,2.493,267,2.493,268,1.991]],["title/injectables/DataService.html",[81,0.969,208,1.118]],["body/injectables/DataService.html",[13,0.056,20,0.371,21,0.445,22,0.371,25,0.806,26,0.615,34,0.951,49,1.567,53,1.567,54,1.021,75,0.445,76,0.181,77,0.024,78,0.034,79,0.024,81,1.175,82,1.278,84,0.526,85,1.821,89,2.026,91,1.369,93,1.58,94,1.58,95,1.58,96,1.722,97,1.821,133,1.175,137,1.991,138,1.567,148,1.1,156,2.564,157,2.139,162,1.799,181,1.278,186,2.716,187,2.564,207,1.5,208,1.356,223,1.5,240,1.799,269,1.799,270,2.252,271,3.257,272,2.252,273,3.21,274,3.21,275,2.252,276,2.252,277,1.799,278,2.252,279,3.21,280,2.252,281,2.252,282,2.252,283,2.252,284,2.252,285,1.799,286,2.252,287,1.799,288,2.252,289,2.252]],["title/classes/Log.html",[76,0.212,265,1.118]],["body/classes/Log.html",[13,0.055,20,0.413,21,0.495,22,0.413,25,0.495,54,1.358,75,0.495,76,0.201,77,0.026,78,0.036,79,0.026,84,0.584,89,2.101,91,1.641,93,1.057,94,1.057,95,1.057,134,1.42,136,2.303,137,1.933,138,1.222,141,2.422,144,2.761,146,3.163,147,2.761,148,1.222,198,2.761,239,3.165,265,1.46,290,1.999,291,3.959,292,3.456,293,2.502,294,3.456,295,3.959,296,2.502,297,2.502,298,3.959,299,2.502,300,2.502,301,2.502,302,2.502]],["title/modules/LogsModule.html",[0,0.723,15,1.293]],["body/modules/LogsModule.html",[0,1.176,2,0.936,3,1.082,4,1.676,5,1.676,6,1.248,7,2.444,8,1.676,13,0.056,15,2.375,17,2.193,18,1.676,19,1.676,20,0.487,21,0.584,22,0.487,24,1.969,25,0.904,26,0.807,33,1.969,34,1.248,75,0.584,76,0.237,77,0.031,78,0.041,79,0.031,219,1.781,265,1.248,268,2.361,303,2.955,304,2.955,305,2.955,306,2.361,307,2.955]],["title/injectables/LogsService.html",[81,0.969,219,0.969]],["body/injectables/LogsService.html",[13,0.056,20,0.434,21,0.521,22,0.434,25,0.863,26,0.719,34,1.113,49,1.286,53,1.286,54,1.11,75,0.521,76,0.211,77,0.028,78,0.038,79,0.028,81,1.31,82,1.494,84,0.615,85,2.031,89,1.988,91,1.31,93,1.512,94,1.512,95,1.512,97,1.494,138,1.748,148,1.286,181,1.494,186,2.385,219,1.31,223,1.755,239,2.907,265,1.512,271,3.485,277,2.104,306,2.104,308,2.104,309,3.579,310,2.633,311,2.633,312,3.579,313,3.579,314,2.633,315,2.633,316,2.633,317,2.633,318,2.633]],["title/coverage.html",[319,2.393]],["body/coverage.html",[6,1.184,13,0.055,16,1.026,22,0.462,54,0.765,74,1.868,76,0.337,77,0.029,78,0.039,79,0.029,81,1.536,83,2.487,102,1.369,109,1.868,133,1.026,135,2.239,151,1.59,152,1.59,154,2.239,181,1.59,208,1.184,219,1.026,258,2.239,265,1.184,269,2.239,290,2.239,308,2.239,319,1.868,320,2.803,321,2.803,322,5.123,323,4.197,324,4.197,325,4.475,326,3.733,327,2.803,328,2.982,329,2.239,330,2.239,331,2.803,332,2.239,333,2.803,334,2.803,335,2.803]],["title/dependencies.html",[3,1.164,336,2.221]],["body/dependencies.html",[3,1.077,13,0.056,26,0.803,29,2.35,31,2.35,32,2.35,34,1.243,77,0.031,78,0.04,79,0.031,111,2.568,148,1.436,210,2.864,218,1.96,337,2.942,338,2.942,339,2.942,340,3.854,341,2.942,342,2.942,343,2.942,344,2.942,345,2.942,346,2.942,347,2.942,348,2.942,349,2.35,350,2.35,351,2.942,352,2.942,353,2.942,354,2.942,355,2.942,356,2.942,357,2.942,358,2.942,359,2.942,360,2.942,361,2.942,362,2.942,363,2.35,364,2.35,365,2.942,366,2.942,367,2.942,368,2.942]],["title/miscellaneous/functions.html",[369,1.26,370,2.539]],["body/miscellaneous/functions.html",[6,2.07,13,0.048,77,0.041,78,0.048,79,0.041,84,0.919,332,3.143,369,2.232,370,3.143,371,3.934]],["title/index.html",[84,0.519,372,2.221,373,2.221]],["body/index.html",[2,0.589,3,0.681,13,0.052,20,0.307,58,1.486,65,1.486,74,2.48,77,0.02,78,0.029,79,0.02,133,1.363,157,1.86,159,1.486,168,1.486,175,2.23,182,1.486,201,1.486,210,1.24,319,2.232,349,1.486,350,2.676,363,2.676,364,2.676,374,3.723,375,3.989,376,4.188,377,1.861,378,1.861,379,1.861,380,1.861,381,1.486,382,1.861,383,1.861,384,1.861,385,1.861,386,1.861,387,1.861,388,1.861,389,3.35,390,3.35,391,1.861,392,1.861,393,2.791,394,2.791,395,2.791,396,2.676,397,2.791,398,2.791,399,1.861,400,1.861,401,1.861,402,1.861,403,1.861,404,1.861,405,1.861,406,1.861,407,1.861,408,1.861,409,1.861,410,1.861,411,1.861,412,1.861,413,1.861,414,1.861,415,1.861,416,1.861,417,1.861,418,1.861,419,3.35,420,1.861,421,1.86,422,1.861,423,1.861,424,1.861,425,1.861,426,1.861,427,1.861,428,1.861,429,1.861,430,1.861,431,1.861,432,4.343,433,1.861,434,2.791,435,1.861,436,4.188,437,1.861,438,1.861,439,2.791,440,1.861,441,1.861,442,1.861,443,1.861,444,1.861,445,1.861,446,3.35,447,3.35,448,3.989,449,1.861,450,1.861,451,1.861,452,1.861,453,1.861,454,1.861,455,2.791,456,1.861,457,1.861,458,1.861,459,1.861,460,1.861,461,1.861,462,1.861,463,1.861,464,1.861,465,1.861,466,1.861,467,1.861,468,1.861,469,1.861]],["title/modules.html",[2,1.138]],["body/modules.html",[1,2.081,2,1.162,12,1.791,13,0.047,14,1.791,15,1.791,77,0.039,78,0.047,79,0.039,396,2.931,470,4.757,471,4.757,472,4.757,473,4.941,474,3.669]],["title/overview.html",[475,2.869]],["body/overview.html",[0,0.779,1,2.892,2,0.904,3,1.044,4,1.618,5,1.618,6,1.205,7,1.618,8,1.618,9,2.278,10,2.278,11,2.278,12,2.067,13,0.054,14,2.465,15,2.289,16,1.65,17,2.142,18,1.618,19,1.618,77,0.03,78,0.04,79,0.03,82,1.618,134,1.618,151,1.618,208,1.788,219,1.65,261,2.278,262,2.278,475,2.278,476,2.852,477,2.852,478,3.776]],["title/miscellaneous/variables.html",[369,1.26,421,2.118]],["body/miscellaneous/variables.html",[13,0.057,77,0.03,78,0.04,79,0.03,83,1.917,84,0.672,96,1.986,109,2.53,110,2.298,111,1.917,137,1.854,285,2.298,287,2.298,328,2.298,329,3.034,330,3.034,369,1.632,381,2.298,421,1.917,479,2.877,480,3.798,481,4.251,482,4.924,483,2.877,484,3.798,485,3.798,486,2.877,487,2.877]]],"invertedIndex":[["",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":322,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":358,"title":{},"body":{"dependencies.html":{}}}],["0.2.25",{"_index":368,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":338,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":325,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":327,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":323,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":326,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":331,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":477,"title":{},"body":{"overview.html":{}}}],["100",{"_index":452,"title":{},"body":{"index.html":{}}}],["100.herokuapp.com",{"_index":392,"title":{},"body":{"index.html":{}}}],["1000",{"_index":409,"title":{},"body":{"index.html":{}}}],["2.1.3",{"_index":342,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":478,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":360,"title":{},"body":{"dependencies.html":{}}}],["3.1.47",{"_index":346,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":476,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":348,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":353,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":365,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":343,"title":{},"body":{"dependencies.html":{}}}],["5.1.3",{"_index":351,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":367,"title":{},"body":{"dependencies.html":{}}}],["6.6.2",{"_index":362,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":407,"title":{},"body":{"index.html":{}}}],["64",{"_index":203,"title":{},"body":{"controllers/DataController.html":{}}}],["7.0.0",{"_index":340,"title":{},"body":{"dependencies.html":{}}}],["7.1.3",{"_index":344,"title":{},"body":{"dependencies.html":{}}}],["7.4.4",{"_index":337,"title":{},"body":{"dependencies.html":{}}}],["8.3.3",{"_index":355,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":193,"title":{},"body":{"controllers/DataController.html":{}}}],["add",{"_index":240,"title":{},"body":{"controllers/DataController.html":{},"injectables/DataService.html":{}}}],["alerts",{"_index":242,"title":{},"body":{"controllers/DataController.html":{}}}],["api",{"_index":376,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":216,"title":{},"body":{"controllers/DataController.html":{}}}],["apioperation({description",{"_index":160,"title":{},"body":{"controllers/DataController.html":{}}}],["apiparam",{"_index":217,"title":{},"body":{"controllers/DataController.html":{}}}],["apiparam({name",{"_index":188,"title":{},"body":{"controllers/DataController.html":{}}}],["apiproperty",{"_index":259,"title":{},"body":{"classes/DataDto.html":{}}}],["apitags",{"_index":215,"title":{},"body":{"controllers/DataController.html":{}}}],["apitags('data",{"_index":221,"title":{},"body":{"controllers/DataController.html":{}}}],["app",{"_index":434,"title":{},"body":{"index.html":{}}}],["application",{"_index":394,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["archived",{"_index":456,"title":{},"body":{"index.html":{}}}],["async",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/DataController.html":{}}}],["attack",{"_index":246,"title":{},"body":{"controllers/DataController.html":{}}}],["attacks",{"_index":120,"title":{},"body":{"injectables/CryptoService.html":{}}}],["autoloadentities",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":396,"title":{},"body":{"index.html":{},"modules.html":{}}}],["await",{"_index":228,"title":{},"body":{"controllers/DataController.html":{}}}],["below",{"_index":420,"title":{},"body":{"index.html":{}}}],["body",{"_index":211,"title":{},"body":{"controllers/DataController.html":{}}}],["boolean",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["briefly",{"_index":410,"title":{},"body":{"index.html":{}}}],["browse",{"_index":473,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":470,"title":{},"body":{"modules.html":{}}}],["brute",{"_index":244,"title":{},"body":{"controllers/DataController.html":{}}}],["bytes",{"_index":130,"title":{},"body":{"injectables/CryptoService.html":{}}}],["catch",{"_index":238,"title":{},"body":{"controllers/DataController.html":{}}}],["changed",{"_index":445,"title":{},"body":{"index.html":{}}}],["characters",{"_index":194,"title":{},"body":{"controllers/DataController.html":{}}}],["characters.})@put(':id/:encryptionkey",{"_index":204,"title":{},"body":{"controllers/DataController.html":{}}}],["class",{"_index":76,"title":{"classes/Data.html":{},"classes/DataDto.html":{},"classes/Log.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["classes",{"_index":134,"title":{},"body":{"classes/Data.html":{},"classes/DataDto.html":{},"classes/Log.html":{},"overview.html":{}}}],["client",{"_index":387,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_datamodule",{"_index":261,"title":{},"body":{"modules/DataModule.html":{},"overview.html":{}}}],["cluster_datamodule_providers",{"_index":262,"title":{},"body":{"modules/DataModule.html":{},"overview.html":{}}}],["cluster_logsmodule",{"_index":303,"title":{},"body":{"modules/LogsModule.html":{}}}],["cluster_logsmodule_providers",{"_index":304,"title":{},"body":{"modules/LogsModule.html":{}}}],["column",{"_index":146,"title":{},"body":{"classes/Data.html":{},"classes/Log.html":{}}}],["column('text",{"_index":144,"title":{},"body":{"classes/Data.html":{},"classes/Log.html":{}}}],["command",{"_index":462,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":393,"title":{},"body":{"index.html":{}}}],["computing",{"_index":116,"title":{},"body":{"injectables/CryptoService.html":{}}}],["configmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_host",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_name",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_password",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_port",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database_user",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":416,"title":{},"body":{"index.html":{}}}],["consider",{"_index":231,"title":{},"body":{"controllers/DataController.html":{}}}],["considered",{"_index":179,"title":{},"body":{"controllers/DataController.html":{}}}],["const",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{}}}],["constructor",{"_index":138,"title":{},"body":{"classes/Data.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"injectables/LogsService.html":{}}}],["constructor(datarepository",{"_index":270,"title":{},"body":{"injectables/DataService.html":{}}}],["constructor(id",{"_index":139,"title":{},"body":{"classes/Data.html":{}}}],["constructor(logrepository",{"_index":310,"title":{},"body":{"injectables/LogsService.html":{}}}],["constructor(type",{"_index":292,"title":{},"body":{"classes/Log.html":{}}}],["controller",{"_index":151,"title":{"controllers/DataController.html":{}},"body":{"controllers/DataController.html":{},"coverage.html":{},"overview.html":{}}}],["controller('data",{"_index":222,"title":{},"body":{"controllers/DataController.html":{}}}],["controllers",{"_index":153,"title":{},"body":{"controllers/DataController.html":{},"modules/DataModule.html":{}}}],["copy",{"_index":417,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":319,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":309,"title":{},"body":{"injectables/LogsService.html":{}}}],["create(type",{"_index":313,"title":{},"body":{"injectables/LogsService.html":{}}}],["createdat",{"_index":291,"title":{},"body":{"classes/Log.html":{}}}],["createdatecolumn",{"_index":295,"title":{},"body":{"classes/Log.html":{}}}],["createquerybuilder",{"_index":486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createquerybuilder(\"data",{"_index":282,"title":{},"body":{"injectables/DataService.html":{}}}],["crypto",{"_index":347,"title":{},"body":{"dependencies.html":{}}}],["crypto/crypto.module",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto/crypto.service",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/DataController.html":{},"modules/DataModule.html":{}}}],["cryptojs",{"_index":109,"title":{},"body":{"injectables/CryptoService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptojs.aes.decrypt(value",{"_index":131,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cryptojs.aes.encrypt(json.stringify(value",{"_index":128,"title":{},"body":{"injectables/CryptoService.html":{}}}],["cryptomodule",{"_index":12,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptoservice",{"_index":16,"title":{"injectables/CryptoService.html":{}},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"controllers/DataController.html":{},"modules/DataModule.html":{},"coverage.html":{},"overview.html":{}}}],["custom",{"_index":233,"title":{},"body":{"controllers/DataController.html":{}}}],["data",{"_index":133,"title":{"classes/Data.html":{}},"body":{"classes/Data.html":{},"controllers/DataController.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"coverage.html":{},"index.html":{}}}],["data'})@apiparam({name",{"_index":161,"title":{},"body":{"controllers/DataController.html":{}}}],["data(id",{"_index":288,"title":{},"body":{"injectables/DataService.html":{}}}],["data.controller",{"_index":264,"title":{},"body":{"modules/DataModule.html":{}}}],["data.entity",{"_index":207,"title":{},"body":{"controllers/DataController.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{}}}],["data.foreach((item",{"_index":230,"title":{},"body":{"controllers/DataController.html":{}}}],["data.service",{"_index":209,"title":{},"body":{"controllers/DataController.html":{},"modules/DataModule.html":{}}}],["data/data.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["data/dto/data.dto",{"_index":103,"title":{},"body":{"injectables/CryptoService.html":{}}}],["database",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["database_host",{"_index":424,"title":{},"body":{"index.html":{}}}],["database_name",{"_index":423,"title":{},"body":{"index.html":{}}}],["database_password",{"_index":425,"title":{},"body":{"index.html":{}}}],["database_port",{"_index":426,"title":{},"body":{"index.html":{}}}],["database_user",{"_index":427,"title":{},"body":{"index.html":{}}}],["datacontroller",{"_index":152,"title":{"controllers/DataController.html":{}},"body":{"controllers/DataController.html":{},"modules/DataModule.html":{},"coverage.html":{}}}],["datadto",{"_index":102,"title":{"classes/DataDto.html":{}},"body":{"injectables/CryptoService.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"coverage.html":{}}}],["datadto.value",{"_index":257,"title":{},"body":{"controllers/DataController.html":{}}}],["datamodule",{"_index":14,"title":{"modules/DataModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules.html":{},"overview.html":{}}}],["datarepository",{"_index":273,"title":{},"body":{"injectables/DataService.html":{}}}],["dataservice",{"_index":208,"title":{"injectables/DataService.html":{}},"body":{"controllers/DataController.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"coverage.html":{},"overview.html":{}}}],["date",{"_index":294,"title":{},"body":{"classes/Log.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["decorators",{"_index":141,"title":{},"body":{"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"classes/Log.html":{}}}],["decrypt",{"_index":86,"title":{},"body":{"injectables/CryptoService.html":{}}}],["decrypt(value",{"_index":88,"title":{},"body":{"injectables/CryptoService.html":{}}}],["decrypted",{"_index":384,"title":{},"body":{"index.html":{}}}],["decrypteddata",{"_index":227,"title":{},"body":{"controllers/DataController.html":{}}}],["decrypteddata.push",{"_index":251,"title":{},"body":{"controllers/DataController.html":{}}}],["decryption",{"_index":248,"title":{},"body":{"controllers/DataController.html":{}}}],["decryptionkey",{"_index":90,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/DataController.html":{}}}],["default",{"_index":481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":91,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"injectables/LogsService.html":{}}}],["demo",{"_index":390,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["deployed",{"_index":388,"title":{},"body":{"index.html":{}}}],["description",{"_index":162,"title":{},"body":{"controllers/DataController.html":{},"injectables/DataService.html":{}}}],["development",{"_index":435,"title":{},"body":{"index.html":{}}}],["disable",{"_index":429,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"index.html":{}}}],["dos",{"_index":119,"title":{},"body":{"injectables/CryptoService.html":{}}}],["dto/data.dto",{"_index":206,"title":{},"body":{"controllers/DataController.html":{}}}],["e.g",{"_index":170,"title":{},"body":{"controllers/DataController.html":{}}}],["e2e",{"_index":449,"title":{},"body":{"index.html":{}}}],["each",{"_index":404,"title":{},"body":{"index.html":{}}}],["encrypt",{"_index":87,"title":{},"body":{"injectables/CryptoService.html":{}}}],["encrypt(encryptionkey",{"_index":99,"title":{},"body":{"injectables/CryptoService.html":{}}}],["encrypted",{"_index":374,"title":{},"body":{"index.html":{}}}],["encryption",{"_index":114,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/DataController.html":{}}}],["encryptionkey",{"_index":101,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/DataController.html":{}}}],["encryptionkey).tostring",{"_index":129,"title":{},"body":{"injectables/CryptoService.html":{}}}],["endpoints",{"_index":380,"title":{},"body":{"index.html":{}}}],["engineering",{"_index":180,"title":{},"body":{"controllers/DataController.html":{}}}],["entity",{"_index":147,"title":{},"body":{"classes/Data.html":{},"classes/Log.html":{}}}],["entrance",{"_index":124,"title":{},"body":{"injectables/CryptoService.html":{}}}],["env",{"_index":419,"title":{},"body":{"index.html":{}}}],["error",{"_index":239,"title":{},"body":{"controllers/DataController.html":{},"classes/Log.html":{},"injectables/LogsService.html":{}}}],["exact",{"_index":163,"title":{},"body":{"controllers/DataController.html":{}}}],["example.env",{"_index":418,"title":{},"body":{"index.html":{}}}],["exception",{"_index":234,"title":{},"body":{"controllers/DataController.html":{}}}],["export",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["express",{"_index":210,"title":{},"body":{"controllers/DataController.html":{},"dependencies.html":{},"index.html":{}}}],["false",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["filter",{"_index":235,"title":{},"body":{"controllers/DataController.html":{}}}],["finalid",{"_index":279,"title":{},"body":{"injectables/DataService.html":{}}}],["first",{"_index":177,"title":{},"body":{"controllers/DataController.html":{}}}],["force",{"_index":245,"title":{},"body":{"controllers/DataController.html":{}}}],["function",{"_index":333,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":370,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id/:decryptionkey",{"_index":184,"title":{},"body":{"controllers/DataController.html":{}}}],["getbyid",{"_index":156,"title":{},"body":{"controllers/DataController.html":{},"injectables/DataService.html":{}}}],["getbyid(id",{"_index":274,"title":{},"body":{"injectables/DataService.html":{}}}],["getbyid(request",{"_index":158,"title":{},"body":{"controllers/DataController.html":{}}}],["getmany",{"_index":287,"title":{},"body":{"injectables/DataService.html":{},"miscellaneous/variables.html":{}}}],["getting",{"_index":372,"title":{"index.html":{}},"body":{}}],["graph",{"_index":474,"title":{},"body":{"modules.html":{}}}],["heavy",{"_index":115,"title":{},"body":{"injectables/CryptoService.html":{}}}],["helmet",{"_index":352,"title":{},"body":{"dependencies.html":{}}}],["helmethttps://github.com/helmetjs/helmet",{"_index":401,"title":{},"body":{"index.html":{}}}],["host",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["http://encrypted",{"_index":391,"title":{},"body":{"index.html":{}}}],["http://localhost:8080",{"_index":397,"title":{},"body":{"index.html":{}}}],["http://localhost:8080/(if",{"_index":443,"title":{},"body":{"index.html":{}}}],["id",{"_index":137,"title":{},"body":{"classes/Data.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"miscellaneous/variables.html":{}}}],["id.replace",{"_index":280,"title":{},"body":{"injectables/DataService.html":{}}}],["id=\"engineering",{"_index":183,"title":{},"body":{"controllers/DataController.html":{}}}],["id=“engineering",{"_index":171,"title":{},"body":{"controllers/DataController.html":{}}}],["identifier",{"_index":320,"title":{},"body":{"coverage.html":{}}}],["ignore_env_fileignore_env_file",{"_index":428,"title":{},"body":{"index.html":{}}}],["ignoreenvfile",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{}}}],["imports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{}}}],["increase",{"_index":400,"title":{},"body":{"index.html":{}}}],["index",{"_index":84,"title":{"index.html":{}},"body":{"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"injectables/LogsService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"index.html":{}}}],["inject",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["injectable",{"_index":81,"title":{"injectables/CryptoService.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{}},"body":{"injectables/CryptoService.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["injectables",{"_index":82,"title":{},"body":{"injectables/CryptoService.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{},"overview.html":{}}}],["injectrepository",{"_index":277,"title":{},"body":{"injectables/DataService.html":{},"injectables/LogsService.html":{}}}],["injectrepository(data",{"_index":278,"title":{},"body":{"injectables/DataService.html":{}}}],["injectrepository(log",{"_index":316,"title":{},"body":{"injectables/LogsService.html":{}}}],["insert",{"_index":487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insertresult",{"_index":315,"title":{},"body":{"injectables/LogsService.html":{}}}],["installation",{"_index":431,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":433,"title":{},"body":{"index.html":{}}}],["introduction",{"_index":377,"title":{},"body":{"index.html":{}}}],["ip",{"_index":406,"title":{},"body":{"index.html":{}}}],["isc",{"_index":468,"title":{},"body":{"index.html":{}}}],["item.id",{"_index":252,"title":{},"body":{"controllers/DataController.html":{}}}],["items",{"_index":408,"title":{},"body":{"index.html":{}}}],["jest.fn",{"_index":482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jest.fn((data",{"_index":483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jobs",{"_index":172,"title":{},"body":{"controllers/DataController.html":{}}}],["join",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["join(__dirname",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["js",{"_index":111,"title":{},"body":{"injectables/CryptoService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["json.parse(bytes.tostring(cryptojs.enc.utf8",{"_index":132,"title":{},"body":{"injectables/CryptoService.html":{}}}],["key",{"_index":201,"title":{},"body":{"controllers/DataController.html":{},"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["length",{"_index":202,"title":{},"body":{"controllers/DataController.html":{}}}],["letter",{"_index":196,"title":{},"body":{"controllers/DataController.html":{}}}],["license",{"_index":467,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":469,"title":{},"body":{"index.html":{}}}],["limit",{"_index":350,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["limiting",{"_index":122,"title":{},"body":{"injectables/CryptoService.html":{}}}],["line:no",{"_index":106,"title":{},"body":{"injectables/CryptoService.html":{}}}],["live",{"_index":389,"title":{},"body":{"index.html":{}}}],["loading(more",{"_index":430,"title":{},"body":{"index.html":{}}}],["log",{"_index":265,"title":{"classes/Log.html":{}},"body":{"modules/DataModule.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["log(type",{"_index":317,"title":{},"body":{"injectables/LogsService.html":{}}}],["log.entity",{"_index":306,"title":{},"body":{"modules/LogsModule.html":{},"injectables/LogsService.html":{}}}],["logrepository",{"_index":312,"title":{},"body":{"injectables/LogsService.html":{}}}],["logs.service",{"_index":307,"title":{},"body":{"modules/LogsModule.html":{}}}],["logs.service.ts",{"_index":458,"title":{},"body":{"index.html":{}}}],["logs/log.entity",{"_index":266,"title":{},"body":{"modules/DataModule.html":{}}}],["logs/logs.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["logs/logs.service",{"_index":220,"title":{},"body":{"controllers/DataController.html":{},"modules/DataModule.html":{}}}],["logsmodule",{"_index":15,"title":{"modules/LogsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/LogsModule.html":{},"modules.html":{},"overview.html":{}}}],["logsservice",{"_index":219,"title":{"injectables/LogsService.html":{}},"body":{"controllers/DataController.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"overview.html":{}}}],["lowercase",{"_index":197,"title":{},"body":{"controllers/DataController.html":{}}}],["make",{"_index":189,"title":{},"body":{"controllers/DataController.html":{}}}],["matching",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":357,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":85,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{}}}],["minimum",{"_index":192,"title":{},"body":{"controllers/DataController.html":{}}}],["minute",{"_index":405,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":369,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mockdatarepository",{"_index":329,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mocklogsrepository",{"_index":330,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":439,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["monitoring",{"_index":241,"title":{},"body":{"controllers/DataController.html":{}}}],["more",{"_index":174,"title":{},"body":{"controllers/DataController.html":{}}}],["name",{"_index":94,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"injectables/LogsService.html":{}}}],["nest.js",{"_index":454,"title":{},"body":{"index.html":{}}}],["nestjs.md",{"_index":457,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"controllers/DataController.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":339,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":341,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":218,"title":{},"body":{"controllers/DataController.html":{},"classes/DataDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"dependencies.html":{}}}],["new",{"_index":181,"title":{},"body":{"controllers/DataController.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["next",{"_index":105,"title":{},"body":{"injectables/CryptoService.html":{}}}],["notes",{"_index":453,"title":{},"body":{"index.html":{}}}],["npm",{"_index":432,"title":{},"body":{"index.html":{}}}],["npx",{"_index":463,"title":{},"body":{"index.html":{}}}],["number",{"_index":198,"title":{},"body":{"controllers/DataController.html":{},"classes/Log.html":{}}}],["object",{"_index":98,"title":{},"body":{"injectables/CryptoService.html":{},"classes/DataDto.html":{}}}],["one",{"_index":175,"title":{},"body":{"controllers/DataController.html":{},"index.html":{}}}],["optional",{"_index":95,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"injectables/LogsService.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["overview",{"_index":475,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owasp",{"_index":413,"title":{},"body":{"index.html":{}}}],["p",{"_index":464,"title":{},"body":{"index.html":{}}}],["package",{"_index":336,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":212,"title":{},"body":{"controllers/DataController.html":{}}}],["param('decryptionkey",{"_index":226,"title":{},"body":{"controllers/DataController.html":{}}}],["param('encryptionkey",{"_index":254,"title":{},"body":{"controllers/DataController.html":{}}}],["param('id",{"_index":225,"title":{},"body":{"controllers/DataController.html":{}}}],["parameters",{"_index":93,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"injectables/LogsService.html":{}}}],["part",{"_index":176,"title":{},"body":{"controllers/DataController.html":{}}}],["password",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["passwordobject",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["path",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["per",{"_index":403,"title":{},"body":{"index.html":{}}}],["pg",{"_index":354,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["postgres",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":155,"title":{},"body":{"controllers/DataController.html":{}}}],["primarycolumn",{"_index":142,"title":{},"body":{"classes/Data.html":{}}}],["primarygeneratedcolumn",{"_index":298,"title":{},"body":{"classes/Log.html":{}}}],["private",{"_index":223,"title":{},"body":{"controllers/DataController.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{}}}],["process.env.ignore_env_file",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":441,"title":{},"body":{"index.html":{}}}],["project",{"_index":461,"title":{},"body":{"index.html":{}}}],["promise",{"_index":186,"title":{},"body":{"controllers/DataController.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{}}}],["properties",{"_index":136,"title":{},"body":{"classes/Data.html":{},"classes/DataDto.html":{},"classes/Log.html":{}}}],["provided",{"_index":386,"title":{},"body":{"index.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["put",{"_index":213,"title":{},"body":{"controllers/DataController.html":{}}}],["put(':id/:encryptionkey",{"_index":253,"title":{},"body":{"controllers/DataController.html":{}}}],["query",{"_index":164,"title":{},"body":{"controllers/DataController.html":{}}}],["rate",{"_index":349,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["read",{"_index":385,"title":{},"body":{"index.html":{}}}],["readme",{"_index":455,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":224,"title":{},"body":{"controllers/DataController.html":{}}}],["real",{"_index":422,"title":{},"body":{"index.html":{}}}],["realized",{"_index":459,"title":{},"body":{"index.html":{}}}],["recognize",{"_index":243,"title":{},"body":{"controllers/DataController.html":{}}}],["recommended",{"_index":200,"title":{},"body":{"controllers/DataController.html":{}}}],["records",{"_index":169,"title":{},"body":{"controllers/DataController.html":{}}}],["reflect",{"_index":356,"title":{},"body":{"dependencies.html":{}}}],["regenerate",{"_index":460,"title":{},"body":{"index.html":{}}}],["rejectunauthorized",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["repository",{"_index":271,"title":{},"body":{"injectables/DataService.html":{},"injectables/LogsService.html":{}}}],["req",{"_index":214,"title":{},"body":{"controllers/DataController.html":{}}}],["request",{"_index":159,"title":{},"body":{"controllers/DataController.html":{},"index.html":{}}}],["request.get('referrer",{"_index":250,"title":{},"body":{"controllers/DataController.html":{}}}],["request.referrer",{"_index":249,"title":{},"body":{"controllers/DataController.html":{}}}],["requests",{"_index":402,"title":{},"body":{"index.html":{}}}],["require",{"_index":191,"title":{},"body":{"controllers/DataController.html":{}}}],["require('crypto",{"_index":110,"title":{},"body":{"injectables/CryptoService.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":108,"title":{},"body":{"injectables/CryptoService.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}],["rest",{"_index":375,"title":{},"body":{"index.html":{}}}],["result",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":382,"title":{},"body":{"index.html":{}}}],["return",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{}}}],["returns",{"_index":97,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"injectables/LogsService.html":{}}}],["reviewed",{"_index":411,"title":{},"body":{"index.html":{}}}],["rimraf",{"_index":359,"title":{},"body":{"dependencies.html":{}}}],["rootpath",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":436,"title":{},"body":{"index.html":{}}}],["running",{"_index":395,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":361,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":466,"title":{},"body":{"index.html":{}}}],["safe",{"_index":190,"title":{},"body":{"controllers/DataController.html":{}}}],["save",{"_index":381,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["security",{"_index":398,"title":{},"body":{"index.html":{}}}],["serialization",{"_index":113,"title":{},"body":{"injectables/CryptoService.html":{}}}],["servestaticmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":168,"title":{},"body":{"controllers/DataController.html":{},"index.html":{}}}],["simple",{"_index":378,"title":{},"body":{"index.html":{}}}],["size",{"_index":123,"title":{},"body":{"injectables/CryptoService.html":{}}}],["solution",{"_index":121,"title":{},"body":{"injectables/CryptoService.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"modules/DataModule.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"modules/LogsModule.html":{},"injectables/LogsService.html":{}}}],["special",{"_index":166,"title":{},"body":{"controllers/DataController.html":{}}}],["src/.../crypto.service.ts",{"_index":479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":371,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../mocks.ts",{"_index":480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/crypto/crypto.module.ts",{"_index":80,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":83,"title":{},"body":{"injectables/CryptoService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.service.ts:15",{"_index":92,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/crypto/crypto.service.ts:8",{"_index":100,"title":{},"body":{"injectables/CryptoService.html":{}}}],["src/data/data.controller.ts",{"_index":154,"title":{},"body":{"controllers/DataController.html":{},"coverage.html":{}}}],["src/data/data.controller.ts:29",{"_index":185,"title":{},"body":{"controllers/DataController.html":{}}}],["src/data/data.controller.ts:67",{"_index":205,"title":{},"body":{"controllers/DataController.html":{}}}],["src/data/data.entity.ts",{"_index":135,"title":{},"body":{"classes/Data.html":{},"coverage.html":{}}}],["src/data/data.entity.ts:12",{"_index":143,"title":{},"body":{"classes/Data.html":{}}}],["src/data/data.entity.ts:15",{"_index":145,"title":{},"body":{"classes/Data.html":{}}}],["src/data/data.entity.ts:5",{"_index":140,"title":{},"body":{"classes/Data.html":{}}}],["src/data/data.module.ts",{"_index":263,"title":{},"body":{"modules/DataModule.html":{}}}],["src/data/data.service.ts",{"_index":269,"title":{},"body":{"injectables/DataService.html":{},"coverage.html":{}}}],["src/data/data.service.ts:13",{"_index":275,"title":{},"body":{"injectables/DataService.html":{}}}],["src/data/data.service.ts:23",{"_index":276,"title":{},"body":{"injectables/DataService.html":{}}}],["src/data/data.service.ts:7",{"_index":272,"title":{},"body":{"injectables/DataService.html":{}}}],["src/data/dto/data.dto.ts",{"_index":258,"title":{},"body":{"classes/DataDto.html":{},"coverage.html":{}}}],["src/data/dto/data.dto.ts:5",{"_index":260,"title":{},"body":{"classes/DataDto.html":{}}}],["src/data/mocks.ts",{"_index":328,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/logs/log.entity.ts",{"_index":290,"title":{},"body":{"classes/Log.html":{},"coverage.html":{}}}],["src/logs/log.entity.ts:12",{"_index":299,"title":{},"body":{"classes/Log.html":{}}}],["src/logs/log.entity.ts:15",{"_index":300,"title":{},"body":{"classes/Log.html":{}}}],["src/logs/log.entity.ts:18",{"_index":297,"title":{},"body":{"classes/Log.html":{}}}],["src/logs/log.entity.ts:21",{"_index":296,"title":{},"body":{"classes/Log.html":{}}}],["src/logs/log.entity.ts:5",{"_index":293,"title":{},"body":{"classes/Log.html":{}}}],["src/logs/logs.module.ts",{"_index":305,"title":{},"body":{"modules/LogsModule.html":{}}}],["src/logs/logs.service.ts",{"_index":308,"title":{},"body":{"injectables/LogsService.html":{},"coverage.html":{}}}],["src/logs/logs.service.ts:13",{"_index":314,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/logs/logs.service.ts:7",{"_index":311,"title":{},"body":{"injectables/LogsService.html":{}}}],["src/main.ts",{"_index":332,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["ssl",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":437,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":440,"title":{},"body":{"index.html":{}}}],["start:prodthe",{"_index":442,"title":{},"body":{"index.html":{}}}],["started",{"_index":373,"title":{"index.html":{}},"body":{}}],["statements",{"_index":321,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["stored",{"_index":383,"title":{},"body":{"index.html":{}}}],["string",{"_index":89,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"injectables/LogsService.html":{}}}],["support",{"_index":471,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":472,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":363,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["swaggerui",{"_index":286,"title":{},"body":{"injectables/DataService.html":{}}}],["symbol",{"_index":199,"title":{},"body":{"controllers/DataController.html":{}}}],["synchronize",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":335,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":334,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":285,"title":{},"body":{"injectables/DataService.html":{},"miscellaneous/variables.html":{}}}],["take(1000",{"_index":284,"title":{},"body":{"injectables/DataService.html":{}}}],["task",{"_index":117,"title":{},"body":{"injectables/CryptoService.html":{}}}],["ten",{"_index":415,"title":{},"body":{"index.html":{}}}],["terms",{"_index":412,"title":{},"body":{"index.html":{}}}],["test",{"_index":446,"title":{},"body":{"index.html":{}}}],["test:covunit",{"_index":451,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":450,"title":{},"body":{"index.html":{}}}],["testid",{"_index":484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tests",{"_index":448,"title":{},"body":{"index.html":{}}}],["this.cryptoservice.decrypt(item.value",{"_index":237,"title":{},"body":{"controllers/DataController.html":{}}}],["this.cryptoservice.encrypt(encryptionkey",{"_index":256,"title":{},"body":{"controllers/DataController.html":{}}}],["this.datarepository",{"_index":281,"title":{},"body":{"injectables/DataService.html":{}}}],["this.datarepository.save(data",{"_index":289,"title":{},"body":{"injectables/DataService.html":{}}}],["this.dataservice.getbyid(id",{"_index":229,"title":{},"body":{"controllers/DataController.html":{}}}],["this.dataservice.update(id",{"_index":255,"title":{},"body":{"controllers/DataController.html":{}}}],["this.error",{"_index":302,"title":{},"body":{"classes/Log.html":{}}}],["this.id",{"_index":149,"title":{},"body":{"classes/Data.html":{}}}],["this.logrepository.insert(log",{"_index":318,"title":{},"body":{"injectables/LogsService.html":{}}}],["this.logsservice.create",{"_index":247,"title":{},"body":{"controllers/DataController.html":{}}}],["this.type",{"_index":301,"title":{},"body":{"classes/Log.html":{}}}],["this.value",{"_index":150,"title":{},"body":{"classes/Data.html":{}}}],["threads",{"_index":127,"title":{},"body":{"injectables/CryptoService.html":{}}}],["threatening",{"_index":118,"title":{},"body":{"injectables/CryptoService.html":{}}}],["todo",{"_index":112,"title":{},"body":{"injectables/CryptoService.html":{},"controllers/DataController.html":{}}}],["top",{"_index":414,"title":{},"body":{"index.html":{}}}],["transferring",{"_index":125,"title":{},"body":{"injectables/CryptoService.html":{}}}],["true",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["try",{"_index":236,"title":{},"body":{"controllers/DataController.html":{}}}],["tsconfig.json",{"_index":465,"title":{},"body":{"index.html":{}}}],["tslint",{"_index":366,"title":{},"body":{"dependencies.html":{}}}],["tslint:disable",{"_index":104,"title":{},"body":{"injectables/CryptoService.html":{}}}],["two",{"_index":379,"title":{},"body":{"index.html":{}}}],["type",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"injectables/LogsService.html":{},"coverage.html":{}}}],["typeorm",{"_index":148,"title":{},"body":{"classes/Data.html":{},"injectables/DataService.html":{},"classes/Log.html":{},"injectables/LogsService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{}}}],["typeormmodule.forfeature([data",{"_index":267,"title":{},"body":{"modules/DataModule.html":{}}}],["typeormmodule.forfeature([log",{"_index":268,"title":{},"body":{"modules/DataModule.html":{},"modules/LogsModule.html":{}}}],["typeormmodule.forrootasync",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["types/crypto",{"_index":345,"title":{},"body":{"dependencies.html":{}}}],["u2fsdgvkx19efawvxvtfk6pn/6tzdvkiw6zlfhkaita",{"_index":485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":364,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["unit",{"_index":447,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["update",{"_index":157,"title":{},"body":{"controllers/DataController.html":{},"injectables/DataService.html":{},"index.html":{}}}],["update(id",{"_index":187,"title":{},"body":{"controllers/DataController.html":{},"injectables/DataService.html":{}}}],["uppercase",{"_index":195,"title":{},"body":{"controllers/DataController.html":{}}}],["use",{"_index":182,"title":{},"body":{"controllers/DataController.html":{},"index.html":{}}}],["used",{"_index":399,"title":{},"body":{"index.html":{}}}],["usefactory",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["username",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":165,"title":{},"body":{"controllers/DataController.html":{}}}],["utilizing",{"_index":232,"title":{},"body":{"controllers/DataController.html":{}}}],["valid",{"_index":173,"title":{},"body":{"controllers/DataController.html":{}}}],["value",{"_index":96,"title":{},"body":{"injectables/CryptoService.html":{},"classes/Data.html":{},"controllers/DataController.html":{},"classes/DataDto.html":{},"injectables/DataService.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":107,"title":{},"body":{"injectables/CryptoService.html":{}}}],["variable",{"_index":324,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":421,"title":{"miscellaneous/variables.html":{}},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["wasn't",{"_index":444,"title":{},"body":{"index.html":{}}}],["watch",{"_index":438,"title":{},"body":{"index.html":{}}}],["where('id",{"_index":283,"title":{},"body":{"injectables/DataService.html":{}}}],["wildcard",{"_index":167,"title":{},"body":{"controllers/DataController.html":{}}}],["won't",{"_index":178,"title":{},"body":{"controllers/DataController.html":{}}}],["worker",{"_index":126,"title":{},"body":{"injectables/CryptoService.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/DataModule.html":{},"modules/LogsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDataModule\n\nDataModule\n\nAppModule -->\n\nDataModule->AppModule\n\n\n\n\n\nLogsModule\n\nLogsModule\n\nAppModule -->\n\nLogsModule->AppModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nAppModule -->\n\nCryptoService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            DataModule\n                        \n                        \n                            LogsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { DataModule } from './data/data.module';\nimport { LogsModule } from './logs/logs.module';\nimport { CryptoService } from './crypto/crypto.service';\nimport { CryptoModule } from './crypto/crypto.module';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      ignoreEnvFile: process.env.IGNORE_ENV_FILE as unknown as boolean,\n    }),\n    DataModule,\n    LogsModule,\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        const passwordObject = configService.get('DATABASE_PASSWORD') ?\n          { password: configService.get('DATABASE_PASSWORD') } : {};\n\n        return {\n          ...passwordObject,\n          'type': 'postgres',\n          'host': configService.get('DATABASE_HOST'),\n          'port': configService.get('DATABASE_PORT'),\n          'username': configService.get('DATABASE_USER'),\n          'database': configService.get('DATABASE_NAME'),\n          'autoLoadEntities': true,\n          'synchronize': true,\n          'ssl': {\n            'rejectUnauthorized': false,\n          },\n        };\n      },\n      inject: [ConfigService],\n    }),\n    CryptoModule,\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'documentation'),\n    }),\n  ],\n  providers: [\n    CryptoService,\n  ]\n})\nexport class AppModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\n@Module({})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoService.html":{"url":"injectables/CryptoService.html","title":"injectable - CryptoService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CryptoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/crypto.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decrypt\n                            \n                            \n                                encrypt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            decrypt\n                        \n                        \n                    \n                \n            \n            \n                \ndecrypt(value: string, decryptionKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/crypto/crypto.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    decryptionKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            encrypt\n                        \n                        \n                    \n                \n            \n            \n                \nencrypt(encryptionKey: string, value: object)\n                \n            \n\n\n            \n                \n                    Defined in src/crypto/crypto.service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    encryptionKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DataDto } from '../data/dto/data.dto';\n// tslint:disable-next-line:no-var-requires\nconst CryptoJS = require('crypto-js');\n\n@Injectable()\nexport class CryptoService {\n  encrypt(encryptionKey: string, value: object): string {\n    // TODO: Serialization and encryption is a heavy computing task,\n    // threatening DOS-type attacks - a solution: limiting the size of\n    // the entrance object, transferring encryption to worker threads.\n    return CryptoJS.AES.encrypt(JSON.stringify(value), encryptionKey).toString();\n  }\n\n  decrypt(value: string, decryptionKey: string): object {\n    const bytes = CryptoJS.AES.decrypt(value, decryptionKey);\n    return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Data.html":{"url":"classes/Data.html","title":"class - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Data\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/data.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string, value: string)\n                    \n                \n                        \n                            \n                                Defined in src/data/data.entity.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/data/data.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/data/data.entity.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn } from 'typeorm';\n\n\n@Entity()\nexport class Data {\n  constructor(id: string, value: string,) {\n    this.id = id;\n    this.value = value;\n  }\n\n  @PrimaryColumn()\n  id: string;\n\n  @Column('text')\n  value: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DataController.html":{"url":"controllers/DataController.html","title":"controller - DataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/data.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                data\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getById\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(request: Request, id: string, decryptionKey: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Get data'})@ApiParam({name: 'id', description: The exact id to query with or using the special wildcard ‘*’ query for a set of records (e.g. id=“engineering-jobs-*”).\n      Id = '*' is not valid.\n      For id with more than one wildcard, the part after the first wildcard won't be considered (e.g. for  id =“engineering-jobs-*-new*” query will use id=\"engineering-jobs-*\")})@Get(':id/:decryptionKey')\n                \n            \n\n            \n                \n                    Defined in src/data/data.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    decryptionKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, encryptionKey: string, dataDto: DataDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'encryptionKey', description: To make encryption safe encryptionKey require with minimum 9 characters, with at least one uppercase letter, one lowercase letter, one number and one symbol.\n    The recommended key length is 64 characters.})@Put(':id/:encryptionKey')\n                \n            \n\n            \n                \n                    Defined in src/data/data.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    encryptionKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataDto\n                                    \n                                                DataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { CryptoService } from '../crypto/crypto.service';\nimport { DataDto } from './dto/data.dto';\nimport { Data } from './data.entity';\nimport { DataService } from './data.service';\nimport { Request } from 'express';\nimport { Body, Controller, Get, Param, Put, Req } from '@nestjs/common';\nimport { ApiTags, ApiOperation, ApiParam } from '@nestjs/swagger';\nimport { LogsService } from '../logs/logs.service';\n\n@ApiTags('data')\n@Controller('data')\nexport class DataController {\n  constructor(\n    private readonly cryptoService: CryptoService,\n    private readonly dataService: DataService,\n    private readonly logsService: LogsService,\n  ) { }\n\n  @ApiOperation({\n    description: 'Get data',\n  })\n  @ApiParam({\n    name: 'id',\n    description: `The exact id to query with or using the special wildcard ‘*’ query for a set of records (e.g. id=“engineering-jobs-*”).\n      Id = '*' is not valid.\n      For id with more than one wildcard, the part after the first wildcard won't be considered (e.g. for  id =“engineering-jobs-*-new*” query will use id=\"engineering-jobs-*\")`,\n  })\n  @Get(':id/:decryptionKey')\n  async getById(\n    @Req() request: Request,\n    @Param('id') id: string,\n    @Param('decryptionKey') decryptionKey: string): Promise {\n    const decryptedData = [];\n\n    if (id === '*') {\n      return decryptedData;\n    }\n    const data = await this.dataService.getById(id);\n\n    data.forEach((item) => {\n      let value;\n      // TODO consider utilizing custom exception filter\n      try {\n        value = this.cryptoService.decrypt(item.value, decryptionKey);\n      } catch (error) {\n        // TODO: add monitoring and alerts to recognize brute-force attack\n        this.logsService.create(\n          'Decryption Error',\n          `id: ${id}, decryptionKey: ${decryptionKey}, request.Referrer: ${request.get('Referrer')}`);\n        return;\n      }\n      decryptedData.push({\n        id: item.id,\n        value,\n      });\n    });\n\n    return decryptedData;\n  }\n\n  @ApiParam({\n    name: 'encryptionKey',\n    description: `To make encryption safe encryptionKey require with minimum 9 characters, with at least one uppercase letter, one lowercase letter, one number and one symbol.\n    The recommended key length is 64 characters.`,\n  })\n  @Put(':id/:encryptionKey')\n  update(\n    @Param('id') id: string,\n    @Param('encryptionKey') encryptionKey: string,\n    @Body() dataDto: DataDto) {\n    return this.dataService.update(id, this.cryptoService.encrypt(encryptionKey, dataDto.value));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DataDto.html":{"url":"classes/DataDto.html","title":"class - DataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/dto/data.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/data/dto/data.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class DataDto {\n  @ApiProperty()\n  value: object;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DataModule.html":{"url":"modules/DataModule.html","title":"module - DataModule","body":"\n                   \n\n\n\n\n    Modules\n    DataModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DataModule\n\n\n\ncluster_DataModule_providers\n\n\n\n\nCryptoService\n\nCryptoService\n\n\n\nDataModule\n\nDataModule\n\nDataModule -->\n\nCryptoService->DataModule\n\n\n\n\n\nDataService\n\nDataService\n\nDataModule -->\n\nDataService->DataModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nDataModule -->\n\nLogsService->DataModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/data/data.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            DataService\n                        \n                        \n                            LogsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            DataController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { DataController } from './data.controller';\nimport { Data } from './data.entity';\nimport { DataService } from './data.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CryptoService } from '../crypto/crypto.service';\nimport { Log } from '../logs/log.entity';\nimport { LogsService } from '../logs/logs.service';\n\n@Module({\n  controllers: [DataController],\n  imports: [\n    TypeOrmModule.forFeature([Data]),\n    TypeOrmModule.forFeature([Log]),\n  ],\n  providers: [\n    CryptoService,\n    DataService,\n    LogsService,\n]\n})\nexport class DataModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataService.html":{"url":"injectables/DataService.html","title":"injectable - DataService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/data/data.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getById\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/data/data.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getById\n                        \n                        \n                    \n                \n            \n            \n                \ngetById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/data/data.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: string, value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/data/data.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Data } from './data.entity';\nimport { Repository } from 'typeorm'\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class DataService {\n  constructor(\n    @InjectRepository(Data)\n    private dataRepository: Repository,\n  ) { }\n\n  getById(id: string): Promise {\n    const finalId = id.replace(/\\*.*/, \"%\");\n\n    return this.dataRepository\n      .createQueryBuilder(\"data\")\n      .where('id LIKE :id', { id: finalId })\n      .take(1000) // add description about take to swaggerUI\n      .getMany();\n  }\n\n  update(id: string, value: string): Promise {\n    const data = new Data(id, value);\n    return this.dataRepository.save(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Log.html":{"url":"classes/Log.html","title":"class - Log","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Log\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logs/log.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                error\n                            \n                            \n                                id\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(type: string, error: string)\n                    \n                \n                        \n                            \n                                Defined in src/logs/log.entity.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/logs/log.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column('text')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/logs/log.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/logs/log.entity.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/logs/log.entity.ts:15\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, CreateDateColumn, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n\n@Entity()\nexport class Log {\n  constructor(type: string, error: string,) {\n    this.type = type;\n    this.error = error;\n  }\n\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  type: string;\n\n  @Column('text')\n  error: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LogsModule.html":{"url":"modules/LogsModule.html","title":"module - LogsModule","body":"\n                   \n\n\n\n\n    Modules\n    LogsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LogsModule\n\n\n\ncluster_LogsModule_providers\n\n\n\n\nLogsService\n\nLogsService\n\n\n\nLogsModule\n\nLogsModule\n\nLogsModule -->\n\nLogsService->LogsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/logs/logs.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LogsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { Log } from './log.entity';\nimport { LogsService } from './logs.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Log]),\n  ],\n  providers: [\n    LogsService\n]\n})\nexport class LogsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsService.html":{"url":"injectables/LogsService.html","title":"injectable - LogsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LogsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/logs/logs.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/logs/logs.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(type: string, error: string)\n                \n            \n\n\n            \n                \n                    Defined in src/logs/logs.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    error\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Log } from './log.entity';\nimport { Repository, InsertResult } from 'typeorm'\nimport { InjectRepository} from '@nestjs/typeorm';\n\n@Injectable()\nexport class LogsService {\n  constructor(\n    @InjectRepository(Log)\n    private logRepository: Repository,\n  ) { }\n\n  create(type: string, error: string): Promise {\n    const log = new Log(type, error);\n    return this.logRepository.insert(log);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            variable\n            CryptoJS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/data/data.controller.ts\n            \n            controller\n            DataController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/data/data.entity.ts\n            \n            class\n            Data\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/data/data.service.ts\n            \n            injectable\n            DataService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/data/dto/data.dto.ts\n            \n            class\n            DataDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/data/mocks.ts\n            \n            variable\n            mockDataRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/data/mocks.ts\n            \n            variable\n            mockLogsRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/logs/log.entity.ts\n            \n            class\n            Log\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/logs/logs.service.ts\n            \n            injectable\n            LogsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.4.4\n        \n            @nestjs/config : ^0.5.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/serve-static : ^2.1.3\n        \n            @nestjs/swagger : ^4.6.0\n        \n            @nestjs/typeorm : ^7.1.3\n        \n            @types/crypto-js : ^3.1.47\n        \n            crypto-js : ^4.0.0\n        \n            express-rate-limit : ^5.1.3\n        \n            helmet : ^4.1.0\n        \n            pg : ^8.3.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.2\n        \n            swagger-ui-express : ^4.1.4\n        \n            tslint : ^6.1.3\n        \n            typeorm : ^0.2.25\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nEncrypted at rest API\nIntroduction\nSimple REST API with two endpoints, to save and retrieve data encrypted at rest. Stored data is encrypted on update and decrypted on read with the key provided by the client.\nThe API was deployed as live-demo on http://encrypted-at-rest-api-100.herokuapp.com/\nCompodoc documentation\nWhile the application is running, documentation is available on http://localhost:8080.\nlive-demo documentation\nSecurity\nDependencies used to increase security:\nHelmethttps://github.com/helmetjs/helmet)\nExpress Rate Limit\nThe limit of requests per each one minute for the IP is 60.\nThe limit of data items in one request is 1000.\nAPI was briefly reviewed in terms of  OWASP Top Ten\nConfiguration\nCopy example.env as .env and update below variables with real data\n DATABASE_NAME\n DATABASE_HOST\n DATABASE_PASSWORD\n DATABASE_PORT\n DATABASE_USER\n IGNORE_ENV_FILEIGNORE_ENV_FILE - Set to true to disable env variables loading(more info)\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodThe App will be available on http://localhost:8080/(If port wasn't changed in .env ).\nTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covUnit tests coverage: 100%\nSwagger UI\nWhile the application is running, Swagger UI is available on http://localhost:8080.\nlive-demo Swagger UI\nNotes\n\nNest.js Readme archived as README nestjs.md\nlogs.service.ts unit tests coverage was realized by unit tests of other modules.\nTo regenerate project documentation use command npx compodoc -p tsconfig.json -s\n\nLicense\nEncrypted at rest API is ISC licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DataModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LogsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_DataModule\n\n\n\ncluster_DataModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDataModule\n\nDataModule\n\nAppModule -->\n\nDataModule->AppModule\n\n\n\n\n\nLogsModule\n\nLogsModule\n\nAppModule -->\n\nLogsModule->AppModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nDataModule -->\n\nCryptoService->DataModule\n\n\n\nAppModule -->\n\nCryptoService->AppModule\n\n\n\n\n\nDataService\n\nDataService\n\nDataModule -->\n\nDataService->DataModule\n\n\n\n\n\nLogsService\n\nLogsService\n\nDataModule -->\n\nLogsService->DataModule\n\n\n\nLogsModule -->\n\nLogsService->LogsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CryptoJS   (src/.../crypto.service.ts)\n                        \n                        \n                            mockDataRepository   (src/.../mocks.ts)\n                        \n                        \n                            mockLogsRepository   (src/.../mocks.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/crypto/crypto.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CryptoJS\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require('crypto-js')\n                        \n                    \n\n\n            \n        \n\n    src/data/mocks.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            mockDataRepository\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : jest.fn(() => ({\n  save: jest.fn((data) => ({\n    id: \"testId\",\n    value: \"U2FsdGVkX19EfAwVXVTfK6pn/6tZdvKIW6ZLfHKaitA=\"\n  })),\n  createQueryBuilder: jest.fn(() => ({\n    where: jest.fn(() => ({\n      take: jest.fn(() => ({\n        getMany: jest.fn(() => ([\n          {\n            id: \"testId\",\n            value: \"U2FsdGVkX19EfAwVXVTfK6pn/6tZdvKIW6ZLfHKaitA=\"\n          }\n        ]))\n      }))\n    }))\n  }))\n}))\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            mockLogsRepository\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : jest.fn(() => ({\n  insert: jest.fn()\n}))\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
